/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { AjfCalendarService, } from '@ajf/core/calendar';
import { Injectable } from '@angular/core';
import { addDays, addWeeks, addYears, endOfISOWeek, getISODay, setISODay, startOfISOWeek, startOfWeek, subWeeks, } from 'date-fns';
import { EthiopianDate } from './ethiopian-date';
import * as i0 from "@angular/core";
function getMonthDays(month, year) {
    if (month < 12) {
        return 30;
    }
    return year % 4 === 3 ? 6 : 5;
}
function getMonthBounds(date) {
    const year = date.getFullYear();
    const month = date.getMonth();
    const start = new EthiopianDate(year, month, 1);
    const endDay = getMonthDays(month, year);
    const end = new EthiopianDate(year, month, endDay);
    return { start, end };
}
export class AjfEthiopianCalendarService extends AjfCalendarService {
    buildView(params) {
        const { viewMode } = params;
        const viewDate = EthiopianDate.gregorianToEthiopian(params.viewDate);
        switch (viewMode) {
            case 'decade':
                let curYear = viewDate.getFullYear();
                let firstYear = curYear - (curYear % 10) + 1;
                let lastYear = firstYear + 11;
                return {
                    header: `${firstYear} - ${lastYear}`,
                    headerRow: [],
                    rows: this._ecDecadeCalendarRows(params),
                };
            case 'year':
                return {
                    header: `${viewDate.getFullYear()}`,
                    headerRow: [],
                    rows: this._ecYearCalendarRows(params),
                };
            case 'month':
                const view = super.buildView(params);
                return {
                    header: `${viewDate.getShortMonthName()} ${viewDate.getFullYear()}`,
                    headerRow: this._ecMonthHeaderRow(params),
                    rows: view.rows,
                };
        }
        return super.buildView(params);
    }
    entryLabel(entry) {
        const ecDate = EthiopianDate.gregorianToEthiopian(entry.date);
        if (entry.type === 'day') {
            return `${ecDate.getDate()}`;
        }
        if (entry.type === 'month') {
            return `${ecDate.getMonthName()}`;
        }
        return `${ecDate.getFullYear()}`;
    }
    monthBounds(date, isoMode) {
        if (!isoMode) {
            const ecDate = EthiopianDate.gregorianToEthiopian(date);
            const { start, end } = getMonthBounds(ecDate);
            return {
                start: EthiopianDate.ethiopianToGregorian(start),
                end: EthiopianDate.ethiopianToGregorian(end),
            };
        }
        else {
            let isoDay = getISODay(date);
            const ecDate = EthiopianDate.gregorianToEthiopian(date);
            let { start, end } = getMonthBounds(ecDate);
            if (ecDate.getMonth() === 12) {
                start = EthiopianDate.gregorianToEthiopian(startOfISOWeek(start.getGregorianDate()));
                end = EthiopianDate.gregorianToEthiopian(endOfISOWeek(end.getGregorianDate()));
            }
            else {
                date = isoDay < 4 ? endOfISOWeek(date) : startOfISOWeek(date);
                const startWeekDay = start.getDay();
                const endWeekDay = end.getDay();
                if (startWeekDay == 0 || startWeekDay > 4) {
                    start = EthiopianDate.gregorianToEthiopian(addWeeks(start.getGregorianDate(), 1));
                }
                if (endWeekDay > 0 && endWeekDay < 4) {
                    end = EthiopianDate.gregorianToEthiopian(subWeeks(end.getGregorianDate(), 1));
                }
            }
            return {
                start: startOfISOWeek(start.getGregorianDate()),
                end: endOfISOWeek(end.getGregorianDate()),
            };
        }
    }
    nextView(viewDate, viewMode) {
        if (viewMode === 'month') {
            const ecDate = EthiopianDate.gregorianToEthiopian(viewDate);
            let year = ecDate.getFullYear();
            let month = ecDate.getMonth();
            if (month === 12) {
                month = 0;
                year += 1;
            }
            else {
                month += 1;
            }
            return EthiopianDate.ethiopianToGregorian(new EthiopianDate(year, month, 1));
        }
        return super.nextView(viewDate, viewMode);
    }
    previousView(viewDate, viewMode) {
        if (viewMode === 'month') {
            const ecDate = EthiopianDate.gregorianToEthiopian(viewDate);
            let year = ecDate.getFullYear();
            let month = ecDate.getMonth();
            if (month === 0) {
                month = 12;
                year -= 1;
            }
            else {
                month -= 1;
            }
            return EthiopianDate.ethiopianToGregorian(new EthiopianDate(year, month, 1));
        }
        return super.previousView(viewDate, viewMode);
    }
    _ecMonthHeaderRow(params) {
        const { isoMode, viewDate } = params;
        let curDate;
        if (isoMode) {
            curDate = setISODay(startOfWeek(viewDate), 1);
        }
        else {
            curDate = startOfWeek(viewDate);
        }
        let weekDayNames = [];
        for (let i = 0; i < 7; i++) {
            const ecDate = EthiopianDate.gregorianToEthiopian(curDate);
            weekDayNames.push(ecDate.getDayOfWeek());
            curDate = addDays(curDate, 1);
        }
        return weekDayNames;
    }
    _ecYearCalendarRows(params) {
        const { viewDate, selection } = params;
        const year = EthiopianDate.gregorianToEthiopian(viewDate).getFullYear();
        let curDate;
        let rows = [];
        for (let i = 0; i <= 4; i++) {
            let row = [];
            for (let j = 0; j < 3; j++) {
                const curMonth = i * 3 + j;
                if (curMonth < 13) {
                    curDate = new EthiopianDate(year, curMonth, 1);
                    let date = EthiopianDate.ethiopianToGregorian(curDate);
                    let newEntry = { type: 'month', date, selected: 'none' };
                    newEntry.selected = this.isEntrySelected(newEntry, selection);
                    row.push(newEntry);
                }
            }
            rows.push(row);
        }
        return rows;
    }
    _ecDecadeCalendarRows(params) {
        const { viewDate, selection } = params;
        const ecDate = EthiopianDate.gregorianToEthiopian(viewDate);
        let curYear = ecDate.getFullYear();
        let firstYear = curYear - (curYear % 10) + 1;
        let curDate = EthiopianDate.ethiopianToGregorian(firstYear, 0, 1);
        let rows = [];
        for (let i = 0; i < 4; i++) {
            let row = [];
            for (let j = 0; j < 3; j++) {
                let date = new Date(curDate);
                let newEntry = { type: 'year', date: date, selected: 'none' };
                newEntry.selected = this.isEntrySelected(newEntry, selection);
                row.push(newEntry);
                curDate = addYears(curDate, 1);
            }
            rows.push(row);
        }
        return rows;
    }
}
AjfEthiopianCalendarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AjfEthiopianCalendarService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
AjfEthiopianCalendarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AjfEthiopianCalendarService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AjfEthiopianCalendarService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,