/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { toEC, toGC } from './converter';
import { MONTHS_NAMES, SHORT_MONTHS_NAMES, WEEK_NAMES } from './utils';
export class EthiopianDate {
    /**
     * @param val - A numeric year value if the second and third parameters ar provided,
     *                                        It should be a date string if not
     * @param month A zero-based numeric value for the month (0 for መስከረም, 12 for ጳጉሜን)
     * @param day A numeric value equal for the day of the month.
     */
    constructor(val, month, day) {
        this._year = 0;
        this._month = 0;
        this._date = 0;
        this._gc = new Date();
        if (val == null && month == null && day == null) {
            const ahun = EthiopianDate.gregorianToEthiopian(new Date());
            [this._year, this._month, this._date] = [ahun.getFullYear(), ahun.getMonth(), ahun.getDate()];
            this._gc = EthiopianDate.ethiopianToGregorian(this._year, this._month, this._date);
        }
        else if (val != null && month == null && day == null && typeof val !== 'number') {
            if (typeof val === 'string') {
                const result = EthiopianDate.parse(val);
                if (result == null) {
                    throw new Error('Invalid Argument Exception');
                }
                [this._year, this._month, this._date] = [
                    result.getFullYear(),
                    result.getMonth(),
                    result.getDate(),
                ];
                this._gc = EthiopianDate.ethiopianToGregorian(this._year, this._month, this._date);
            }
            else if (typeof val === 'object' && val instanceof Date) {
                const result = EthiopianDate.gregorianToEthiopian(val);
                [this._year, this._month, this._date] = [
                    result.getFullYear(),
                    result.getMonth(),
                    result.getDate(),
                ];
                this._gc = EthiopianDate.ethiopianToGregorian(this._year, this._month, this._date);
            }
            else {
                throw new Error('Invalid Argument Exception');
            }
        }
        else if (val != null && month != null && day != null && typeof val === 'number') {
            this._year = val;
            this._month = month;
            this._date = day;
            this._gc = EthiopianDate.ethiopianToGregorian(this._year, this._month, this._date);
        }
    }
    getDate() {
        return this._date;
    }
    getDay() {
        return this._gc.getDay();
    }
    getDayOfWeek() {
        const weekDay = this.getGCWeekDay();
        return WEEK_NAMES[weekDay];
    }
    getFullYear() {
        return this._year;
    }
    getGregorianDate() {
        return this._gc;
    }
    getGCWeekDay() {
        return this._gc.getDay();
    }
    getMonth() {
        return this._month;
    }
    getMonthName() {
        return this._month >= 0 && this._month < MONTHS_NAMES.length ? MONTHS_NAMES[this._month] : null;
    }
    getShortMonthName() {
        return this._month >= 0 && this._month < SHORT_MONTHS_NAMES.length
            ? SHORT_MONTHS_NAMES[this._month]
            : null;
    }
    getHours() {
        return 0;
    }
    getMinutes() {
        return 0;
    }
    getSeconds() {
        return 0;
    }
    getMilliseconds() {
        return 0;
    }
    toString() {
        return `${this._year}-${this._month + 1}-${this._date}`;
    }
    /**
     * Converts a Ethiopian date to Gregorian and returns Date instance representing Gregorian Date.
     *
     * @param val - A numeric year value if the second and third parameters are
     *                                   provided, it should be a date string if not
     * @param month A zero-based numeric value for the month
     *                         (0 for መስከረም, 12 for ጳጉሜን)
     * @param day A numeric value equal for the day of the month.
     *
     * @api public
     */
    static ethiopianToGregorian(val, month, day) {
        let ec;
        if (val != null && month == null && day == null && typeof val !== 'number') {
            if (typeof val === 'string') {
                const etDate = new EthiopianDate(val);
                ec = [etDate.getFullYear(), etDate.getMonth() + 1, etDate.getDate()];
            }
            else if (typeof val === 'object' && val instanceof EthiopianDate) {
                const [y, m, d] = [val.getFullYear(), val.getMonth() + 1, val.getDate()];
                ec = [y, m, d];
            }
            else {
                throw new Error('Invalid Argument Exception');
            }
        }
        else if (val != null && month != null && day != null && typeof val === 'number') {
            ec = [val, month + 1, day];
        }
        else {
            throw new Error('Invalid Argument Exception');
        }
        const gc = toGC(ec);
        return new Date(gc[0], gc[1] - 1, gc[2]);
    }
    /**
     *
     * @param val - A numeric year value if the second and third parameters are
     *                                   provided, it should be a date string if not
     * @param month A zero-based numeric value for the month
     *                         (0 for January, 11 for December)
     * @param day A numeric value equal for the day of the month.
     *
     * @api public
     */
    static gregorianToEthiopian(val, month, day) {
        let gc;
        if (val != null && month == null && day == null && typeof val !== 'number') {
            if (typeof val === 'string') {
                const gcDate = new Date(val);
                gc = [gcDate.getFullYear(), gcDate.getMonth() + 1, gcDate.getDate()];
            }
            else if (typeof val === 'object' && val instanceof Date) {
                const [y, m, d] = [val.getFullYear(), val.getMonth() + 1, val.getDate()];
                gc = [y, m, d];
            }
            else {
                throw new Error('Invalid Argument Exception');
            }
        }
        else if (val != null && month != null && day != null && typeof val === 'number') {
            gc = [val, month + 1, day];
        }
        else {
            throw new Error('Invalid Argument Exception');
        }
        const ec = toEC(gc);
        return new EthiopianDate(ec[0], ec[1] - 1, ec[2]);
    }
    /**
     * Parse Ethiopian date from string
     *
     * @param dateString a date string to parse
     * @param pattern a parsing pattern
     *
     * @returns EthiopianDate
     */
    static parse(dateString) {
        if (!dateString) {
            return null;
        }
        const result = dateString.split('-');
        if (result.length === 3) {
            const [y, m, d] = result;
            return new EthiopianDate(parseInt(y, 10), parseInt(m, 10) - 1, parseInt(d, 10));
        }
        throw new Error(`ParsingError: Can't parse ${dateString}`);
    }
}
//# sourceMappingURL=data:application/json;base64,